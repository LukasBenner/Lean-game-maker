#! /usr/bin/env python3

from pathlib import Path
from fire import Fire
import toml, jsonpickle, distutils.dir_util


import lean_game_maker
from lean_game_maker.line_reader import FileReader
from lean_game_maker.objects import (default_line_handler, 
    HiddenBegin, HiddenEnd, 
    TextBegin, TextEnd,
    HintBegin, HintEnd,
    TacticBegin, TacticEnd,
    AxiomBegin, AxiomEnd,
    ExampleBegin, ExampleEnd,
    LemmaBegin, LemmaEnd,
    TheoremBegin, TheoremEnd,
    DefinitionBegin, DefinitionEnd,
    ProofBegin, ProofEnd)

from lean_game_maker.interactive_loader import interactive_server

module_path = Path(lean_game_maker.__file__).parent
interactive_path = module_path.parent / 'interactive_interface'

def render_lean_project(outdir=None, nolib=False):
    try:
        leanpkg_toml = toml.load('leanpkg.toml')
    except FileNotFoundError:
        print("Couldn't find a leanpkg.toml, I give up.")
        return
    toolchain = leanpkg_toml['package']['lean_version']

    
    outdir = outdir or 'html'
    Path(outdir).mkdir(exist_ok=True)

    s = interactive_server(interactive_path=interactive_path,
                    toolchain=toolchain, outdir=outdir)
    if not s.copy_files(make_lib = not nolib):
        return



    file_reader = FileReader(default_line_handler,
            [HiddenBegin, HiddenEnd,
             TextBegin, TextEnd,
             HintBegin, HintEnd,
             TacticBegin, TacticEnd,
             AxiomBegin, AxiomEnd,
             ExampleBegin, ExampleEnd,
             LemmaBegin, LemmaEnd,
             TheoremBegin, TheoremEnd,
             DefinitionBegin, DefinitionEnd,
             ProofBegin, ProofEnd ])
    
    
    game_config = toml.load('game_config.toml')
    ### TODO: check for errors

    if 'extra_files' in game_config and Path(game_config['extra_files']).is_dir():
        distutils.dir_util.copy_tree(str(Path('.')/game_config['extra_files']), str(Path(outdir)/game_config['extra_files']))


    game_data = { 'name': game_config['name'] if 'name' in game_config else "Lean game", 'worlds' : [] }

    if 'version' in game_config:
        game_data['version'] = game_config['version']

    print(f"Intro page ...", end="")
    intro_file = game_config['intro']
    if not Path(intro_file).exists():
        print(f'The file "{intro_file}" does not exist.')
        return
    file_reader.read_file(intro_file)
    game_data['introData'] = jsonpickle.loads(jsonpickle.dumps({'objects' : file_reader.output}, unpicklable=True))
    file_reader.hard_reset()
    print(f"\rIntro page ... done")

    for w, world_config in enumerate(game_config['worlds']):
        world_data = { 'name': world_config['name'] , 'levels' : [] }
        if 'parents' in world_config:
            world_data['parents'] = [i - 1 for i in world_config['parents']]

        print(f"{world_data['name']} :")
        for i, level_address in enumerate(world_config['levels']):
            if not Path(level_address).exists():
                print(f'The file "{level_address}" does not exist.')
                return
            print(f"\tlevel {i+1} ...", end="")
            file_reader.read_file(level_address)
            if len(file_reader.output) > 0:
                level_data = {'name': file_reader.name, 'objects' : file_reader.output}
                level_data = jsonpickle.loads(jsonpickle.dumps(level_data, unpicklable=True))
                world_data['levels'].append(level_data)
            file_reader.hard_reset()
            print(f"\r\tlevel {i+1} ... done")

        if len(world_data['levels']) > 0:
            game_data['worlds'].append(world_data)


    with open(str(Path(outdir) / 'game_data.js'), 'w') as f:
        temp = jsonpickle.encode(game_data, unpicklable=False)
        f.write("game_data = " + temp)



if __name__ == '__main__':
    Fire(render_lean_project)
